(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{301:function(a,t,e){"use strict";e.r(t);var n=e(14),s=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"mysql的基础知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql的基础知识"}},[a._v("#")]),a._v(" MySQL的基础知识")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img.maihaoche.com/mhc-ui/1576129701270_157612970100057265.png",alt:"image"}})]),a._v(" "),t("h3",{attrs:{id:"_1-数据库链接操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据库链接操作"}},[a._v("#")]),a._v(" 1.数据库链接操作")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/*连接mysql*/\nmysql -h 地址 -P 端口 -u 用户名 -p 密码\n例如: mysql -h 127.0.0.1 -P 3306 -u root -p ****\n\n/*退出mysql*/\nexit;\n")])])]),t("h3",{attrs:{id:"_2-数据库操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据库操作"}},[a._v("#")]),a._v(" 2.数据库操作")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#数据库操作\n/*关键字:create 创建数据库(增)*/\ncreate database 数据库名 [数据库选项];\n例如: create database test default charset utf8 collate utf8_bin;\n/*数据库选项:字符集和校对规则*/\n字符集:一般默认utf8;\n校对规则常见: ⑴ci结尾的:不分区大小写 ⑵cs结尾的:区分大小写 ⑶bin结尾的：二进制编码进行比较\n\n/*关键字:show 查看当前有哪些数据库(查)*/\nshow databases;\n\n/*查看数据库的创建语句*/\nshow create database 数据库名;\n\n/*关键字:alter 修改数据库的选项信息(改)*/\nalter database 数据库名 [新的数据库选项];\n例如: alter database test default charset gbk;\n\n/*关键字:drop  删除数据库(删)*/\ndrop database 数据库名;\n\n/*关键字:use 进入指定的数据库*/\nuse 数据库名;\n")])])]),t("h3",{attrs:{id:"_3-表操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-表操作"}},[a._v("#")]),a._v(" 3.表操作")]),a._v(" "),t("h4",{attrs:{id:"_3-1-建表三大范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-建表三大范式"}},[a._v("#")]),a._v(" 3.1 建表三大范式")]),a._v(" "),t("h5",{attrs:{id:"_1-第一范式-确保每列保持原子性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-第一范式-确保每列保持原子性"}},[a._v("#")]),a._v(" 1．第一范式(确保每列保持原子性)")]),a._v(" "),t("blockquote",[t("p",[a._v("第一范式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。")])]),a._v(" "),t("h5",{attrs:{id:"_2-第二范式-确保表中的每列都和主键相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-第二范式-确保表中的每列都和主键相关"}},[a._v("#")]),a._v(" 2．第二范式(确保表中的每列都和主键相关)")]),a._v(" "),t("blockquote",[t("p",[a._v("第二范式在第一范式的基础之上更进一层。第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。")])]),a._v(" "),t("h5",{attrs:{id:"_3-第三范式-确保每列都和主键列直接相关-而不是间接相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-第三范式-确保每列都和主键列直接相关-而不是间接相关"}},[a._v("#")]),a._v(" 3．第三范式(确保每列都和主键列直接相关,而不是间接相关)")]),a._v(" "),t("blockquote",[t("p",[a._v("第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。")])]),a._v(" "),t("h4",{attrs:{id:"_3-2-数据库一对一、一对多、多对多关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-数据库一对一、一对多、多对多关系"}},[a._v("#")]),a._v(" 3.2 数据库一对一、一对多、多对多关系")]),a._v(" "),t("h5",{attrs:{id:"_1-一对一关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-一对一关系"}},[a._v("#")]),a._v(" 1. 一对一关系")]),a._v(" "),t("blockquote",[t("p",[a._v("一对一关系是最好理解的一种关系，在数据库建表的时候可以将人表的主键放置与身份证表里面，也可以将身份证表的主键放置于人表里面")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img.maihaoche.com/mhc-ui/rc-upload-1577754987679-2_WechatIMG856.png",alt:"image"}})]),a._v(" "),t("h5",{attrs:{id:"_2-一对多关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-一对多关系"}},[a._v("#")]),a._v(" 2. 一对多关系")]),a._v(" "),t("blockquote",[t("p",[a._v("班级是1端，学生是多端，结合面向对象的思想，1端是父亲，多端是儿子，所以多端具有1端的属性，也就是说多端里面应该放置1端的主键，那么学生表里面应该放置班级表里面的主键\n"),t("img",{attrs:{src:"https://img.maihaoche.com/mhc-ui/1576215405089_157621540500046644.png",alt:"image"}})])]),a._v(" "),t("h5",{attrs:{id:"_3-多对多关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-多对多关系"}},[a._v("#")]),a._v(" 3. 多对多关系")]),a._v(" "),t("blockquote",[t("p",[a._v("对于多对多关系，需要转换成1对多关系，那么就需要一张中间表来转换，这张中间表里面需要存放学生表里面的主键和课程表里面的主键，此时学生与中间表示1对多关系，课程与中间表是1对多关系，学生与课程是多对多关系\n"),t("img",{attrs:{src:"https://img.maihaoche.com/mhc-ui/1576215518630_157621551800070383.png",alt:"image"}})])]),a._v(" "),t("blockquote",[t("p",[a._v("总结：最重要的关系就是1对多关系，根据面向对象思想在建表的时候将1端主键置于多端即可。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#表的操作\n/*关键字:create 创建数据表(增)*/\ncreate table 表名(\n字段1  字段1类型 [字段选项],\n字段2  字段2类型 [字段选项],\n字段n  字段n类型 [字段选项]\n)表选项信息;\n\n例如: create table test(\n  id int(10) unsigned not null auto_increment comment 'id',\n  content varchar(100) not null default '' comment '内容',\n  time int(10) not null default 0 comment '时间',\n  primary key (id)\n)engine=InnoDB default charset=utf8 comment='测试表';\n\n语法解析(下文MySQL列属性单独解析):\n如果不想字段为NULL可以设置字段的属性为NOT NUL,在操作数据库时如果输入该字段的数据为NULL,就会报错.\nAUTO_INCREMENT定义列为自增的属性,一般用于主键,数值会自动加1.\nPRIMARY KEY关键字用于定义列为主键.可以使用多列来定义主键,列间以逗号分隔.\nENGINE 设置存储引擎,CHARSET 设置编码, comment 备注信息.\n\n\n/*关键字:show 查询当前数据库下有哪些数据表(查)*/\nshow tables;\n\n/*关键字:like 模糊查询*/\n通配符：_可以代表任意的单个字符，%可以代表任意的字符\nshow tables like '模糊查询表名%';\n\n/*查看表的创建语句*/\nshow create table 表名;\n\n/*查看表的结构*/\ndesc 表名;\n\n/*关键字:drop  删除数据表(删)*/\ndrop table [if exists] 表名\n例如: drop table if exists test;\n\n/*关键字:delete，truncate  删除表中的数据*/\ndelete from 表名\ntruncate table 表名\n例如: truncate table if exists test;\n\n/*关键字:alter 修改表名(改)*/\nalter table 旧表名 rename to 新表名;\n\n/*修改列定义*/\n/*关键字:add 增加一列*/\nalter table 表名 add 新列名 字段类型 [字段选项];\n例如: alter table test add name char(10) not null default '' comment '名字';\n\n/*关键字:drop 删除一列*/\nalter table 表名 drop 字段名;\n例如: alter table test drop content;\n\n/*关键字:modify 修改字段类型*/\nalter table 表名 modify 字段名 新的字段类型 [新的字段选项];\n例如: alter table test modify name varchar(100) not null default 'admin' comment '修改后名字';\n")])])]),t("h5",{attrs:{id:"_4-注意尽量不使用外键"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-注意尽量不使用外键"}},[a._v("#")]),a._v(" 4. 注意尽量不使用外键")]),a._v(" "),t("blockquote",[t("p",[a._v("性能问题（查询控制权限）"),t("br"),a._v("并发问题(死锁)"),t("br"),a._v("扩展性问题(迁移，分表分库外键无法生效)"),t("br"),a._v("技术问题(数据库开销变大)")])]),a._v(" "),t("h3",{attrs:{id:"_4-数据操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据操作"}},[a._v("#")]),a._v(" 4.数据操作")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#数据操作\n/*关键字:insert 插入数据(增)*/\ninsert into 表名(字段列表) values (值列表);\n例如: create table user(\n  id int(10) unsigned not null auto_increment comment 'id',\n  name char(10) not null default '' comment '名字',\n  age int(3) not null default 0 comment '年龄',\n  primary key (id)\n)engine=InnoDB default charset=utf8 comment='用户表';\n\n/*外键，一个特殊的索引，只能是指定内容*/\ncreate table color(\n    nid int not null primary key,\n    name char(16) not null\n)\n\ncreate table fruit(\n    nid int not null primary key,\n    smt char(32) null ,\n    color_id int not null,\n    constraint fk_cc foreign key (color_id) references color(nid)\n)\n\n")])])]),t("h4",{attrs:{id:"_4-1-增"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-增"}},[a._v("#")]),a._v(" 4.1 增")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("insert into 表 (列名,列名...) values (值,值,值...)\ninsert into 表 (列名,列名...) values (值,值,值...),(值,值,值...)\ninsert into 表 (列名,列名...) select (列名,列名...) from 表\n")])])]),t("h4",{attrs:{id:"_4-2-删"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-删"}},[a._v("#")]),a._v(" 4.2 删")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("delete from 表\ndelete from 表 where id＝1 and name＝'alex'\n")])])]),t("h4",{attrs:{id:"_4-3-改"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-改"}},[a._v("#")]),a._v(" 4.3 改")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("update 表名 set 字段1=新值1,字段n=新值n [修改条件]\n例如：update 表 set name ＝ 'alex' where id>1\n")])])]),t("h4",{attrs:{id:"_4-4-查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-查"}},[a._v("#")]),a._v(" 4.4 查")]),a._v(" "),t("h5",{attrs:{id:"_4-4-1-普通查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-普通查询"}},[a._v("#")]),a._v(" 4.4.1 普通查询")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("select * from 表\nselect nid,name,gender as gg from 表\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("a、条件\n    select * from 表 where id > 1 and name != 'alex' and num = 12;\n \n    select * from 表 where id between 5 and 16;\n \n    select * from 表 where id in (11,22,33)\n    select * from 表 where id not in (11,22,33)\n    select * from 表 where id in (select nid from 表)\nb、限制\n    select * from 表 limit 5;            - 前5行\n    select * from 表 limit 4,5;          - 从第4行开始的5行\n    \n oracle 的分页：\n SELECT *\n\n  FROM (SELECT a.*, ROWNUM rn\n\n          FROM (SELECT *\n\n                  FROM table_name) a\n\n         WHERE ROWNUM <= 40)\n\n WHERE rn >= 21\n \n sql sever的分页\n 。。。\n\n更多选项查询\n")])])]),t("h5",{attrs:{id:"_4-4-2、数据排序-查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-2、数据排序-查询"}},[a._v("#")]),a._v(" 4.4.2、数据排序(查询)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("select * from 表 order by 列 asc              - 根据 “列” 从小到大排列\nselect * from 表 order by 列 desc             - 根据 “列” 从大到小排列\nselect * from 表 order by 列1 desc,列2 asc    - 根据 “列1” 从大到小排列，如果相同则按列2从小到大排序\n")])])]),t("h5",{attrs:{id:"_4-4-3、模糊查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-3、模糊查询"}},[a._v("#")]),a._v(" 4.4.3、模糊查询")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("select * from 表 where name like 'ale%'  - ale开头的所有（多个字符串）\nselect * from 表 where name like 'ale_'  - ale开头的所有（一个字符）\n")])])]),t("h5",{attrs:{id:"_4-4-4、聚合函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-4、聚合函数"}},[a._v("#")]),a._v(" 4.4.4、聚合函数")]),a._v(" "),t("blockquote",[t("p",[a._v("聚合函数的特点"),t("br"),a._v("\n　　1.每个组函数接收一个参数（字段名或者表达式） 统计结果中默认忽略字段为NULL的记录"),t("br"),a._v("\n　　2.要想列值为NULL的行也参与组函数的计算，必须使用IFNULL函数对NULL值做转换。"),t("br"),a._v("\n　　3.不允许出现嵌套 比如sum(max(xx))"),t("br")])]),a._v(" "),t("h6",{attrs:{id:"_1-聚合函数-count-求数据表的行数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-聚合函数-count-求数据表的行数"}},[a._v("#")]),a._v(" 1.聚合函数 count ()，求数据表的行数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("select count(*/字段名) from 数据表）——不建议conunt（*），建议用count（0）\n")])])]),t("h6",{attrs:{id:"_2-聚合函数-max-求某列的最大数值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-聚合函数-max-求某列的最大数值"}},[a._v("#")]),a._v(" 2.聚合函数 max()，求某列的最大数值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("select max(字段名）from 数据表\n")])])]),t("h6",{attrs:{id:"_3-聚合函数min-求某列的最小值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-聚合函数min-求某列的最小值"}},[a._v("#")]),a._v(" 3.聚合函数min(),求某列的最小值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("select min(字段名） from 数据表\n")])])]),t("h6",{attrs:{id:"_4-聚合函数sum-对数据表的某列进行求和操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-聚合函数sum-对数据表的某列进行求和操作"}},[a._v("#")]),a._v(" 4.聚合函数sum(),对数据表的某列进行求和操作")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("select sum(字段名) from 数据表\n")])])]),t("h6",{attrs:{id:"_5-聚合函数avg-对数据表的某列进行求平均值操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-聚合函数avg-对数据表的某列进行求平均值操作"}},[a._v("#")]),a._v(" 5.聚合函数avg()，对数据表的某列进行求平均值操作")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("select avg(字段名） from 数据表\n")])])]),t("h6",{attrs:{id:"_6-聚合函数和分组一起使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-聚合函数和分组一起使用"}},[a._v("#")]),a._v(" 6.聚合函数和分组一起使用")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("select count(*), group_concat(age) from students group by age;\n\n1、功能：将group by产生的同一个分组中的值连接起来，返回一个字符串结果。\n2、语法：group_concat([distinct] 要连接的字段 [order by 排序字段 asc/desc ] [separator '分隔符'])\n")])])]),t("h6",{attrs:{id:"_7-数学函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-数学函数"}},[a._v("#")]),a._v(" 7.数学函数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SELECT ABS(-8);  /*绝对值*/\n\nSELECT CEILING(9.4);  /*向上取整*/\n\nSELECT FLOOR(9.4);  /*向下取整*/\n\nSELECT RAND();  /*随机数,返回一个0-1之间的随机数*/\n\nSELECT SIGN(0); /*符号函数: 负数返回-1,正数返回1,0返回0*/\n")])])]),t("h6",{attrs:{id:"_8-字符串函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-字符串函数"}},[a._v("#")]),a._v(" 8.字符串函数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SELECT CHAR_LENGTH(''); /*返回字符串包含的字符数*/\n\nSELECT CONCAT('','','');  /*合并字符串,参数可以有多个*/\n\nSELECT INSERT('',1,2,'');  /*替换字符串,从某个位置开始替换某个长度*/\n\nSELECT LOWER(''); /*小写*/\n\nSELECT UPPER(''); /*大写*/\n\nSELECT LEFT('hello,world',5);  /*从左边截取*/\n\nSELECT RIGHT('hello,world',5);  /*从右边截取*/\n\nSELECT REPLACE('','','');  /*替换字符串*/\n\nSELECT SUBSTR('',4,6); /*截取字符串,开始和长度*/\n\nSELECT REVERSE(''); /*反转*/\n")])])]),t("h6",{attrs:{id:"_9-日期和时间函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-日期和时间函数"}},[a._v("#")]),a._v(" 9.日期和时间函数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SELECT CURRENT_DATE();   /*获取当前日期*/\nSELECT CURDATE();   /*获取当前日期*/\n\nSELECT NOW();   /*获取当前日期和时间*/\nSELECT LOCALTIME();   /*获取当前日期和时间*/\nSELECT SYSDATE();   /*获取当前日期和时间*/\n\n/*获取年月日,时分秒*/\nSELECT YEAR(NOW());\nSELECT MONTH(NOW());\nSELECT DAY(NOW());\nSELECT HOUR(NOW());\nSELECT MINUTE(NOW());\nSELECT SECOND(NOW());\n")])])]),t("h4",{attrs:{id:"_4-5、分组查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5、分组查询"}},[a._v("#")]),a._v(" 4.5、分组查询")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("分组\n    select num from 表 group by num\n    select num,nid from 表 group by num,nid\n    select num,nid from 表  where nid > 10 group by num,nid order nid desc\n    select num,nid,count(*),sum(score),max(score),min(score) from 表 group by num,nid\n \n    select num from 表 group by num having max(id) > 10\n \n    特别的：group by 必须在where之后，order by之前\n")])])]),t("h4",{attrs:{id:"_4-6、多表查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-6、多表查询"}},[a._v("#")]),a._v(" 4.6、多表查询")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("a、连表\n    无对应关系则不显示\n    select A.num, A.name, B.name\n    from A,B\n    Where A.nid = B.nid\n \n    无对应关系则不显示\n    select A.num, A.name, B.name\n    from A inner join B\n    on A.nid = B.nid\n \n    A表所有显示，如果B中无对应关系，则值为null\n    select A.num, A.name, B.name\n    from A left join B\n    on A.nid = B.nid\n \n    B表所有显示，如果B中无对应关系，则值为null\n    select A.num, A.name, B.name\n    from A right join B\n    on A.nid = B.nid\nb、组合\n    组合，自动处理重合\n    select nickname\n    from A\n    union\n    select name\n    from B\n \n    组合，不处理重合\n    select nickname\n    from A\n    union all\n    select name\n    from B\n")])])]),t("h3",{attrs:{id:"_5-mysql数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-mysql数据类型"}},[a._v("#")]),a._v(" 5.MySQL数据类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#MySQL数据类型\n/*MySQL三大数据类型:数值型、字符串型和日期时间型*/\n")])])]),t("p",[t("img",{attrs:{src:"https://img.maihaoche.com/mhc-ui/1576127211662_157612721100038216.png",alt:"image"}})]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/*数值型*/\n")])])]),t("p",[t("img",{attrs:{src:"https://img.maihaoche.com/mhc-ui/1576127497246_157612749700023883.png",alt:"image"}})]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/*字符串型*/\n")])])]),t("p",[t("img",{attrs:{src:"https://img.maihaoche.com/mhc-ui/1576127647509_157612764700031783.png",alt:"image"}})]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/*日期时间型*/\n")])])]),t("p",[t("img",{attrs:{src:"https://img.maihaoche.com/mhc-ui/1576127715604_157612771500094958.png",alt:"image"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://www.sudo.ren/attachment/20190731/d19865a651e04e328e7daf749e2ecac8.jpg",alt:"image"}})]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("-")]),a._v(" "),t("th",[a._v("关系型数据库")]),a._v(" "),t("th",[a._v("非关系型数据库（NoSql---\x3enot only sql）")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("应用")]),a._v(" "),t("td",[a._v("mariaDB, MySQL, Oracle, SQL Server 等")]),a._v(" "),t("td",[a._v("mongoDB (文档型数据库), redis (键值型数据库), 列存储数据库  (HBase), Neo4j 等")])]),a._v(" "),t("tr",[t("td",[a._v("优点")]),a._v(" "),t("td",[a._v("1.易于维护：都是使用表结构，格式一致"),t("br"),a._v(" 2.使用方便：SQL语言通用，可用于复杂查询；"),t("br"),a._v("3.复杂操作：支持SQL，可用于一个表以及多个表之间非常复杂的查询。")]),a._v(" "),t("td",[a._v("1.格式灵活：存储数据的格式可以是key,value形式、文档形式、图片形式等等，文档形式、图片形式等等，使用灵活，应用场景广泛，而关系型数据库则只支持基础类型。"),t("br"),a._v("2.速度快：nosql可以使用硬盘或者随机存储器作为载体，而关系型数据库只能使用硬盘；"),t("br"),a._v("3.高扩展性 "),t("br"),a._v("4.成本低：nosql数据库部署简单，基本都是开源软件。。"),t("br"),a._v("5.支持分布式集群，负载均衡，性能高")])]),a._v(" "),t("tr",[t("td",[a._v("缺点")]),a._v(" "),t("td",[a._v("1.每次操作都要进行sql语句的解析,消耗较大"),t("br"),a._v("2.读写性能比较差，尤其是海量数据的高效率读写；"),t("br"),a._v("3.固定的表结构，灵活度稍欠；(一致性)"),t("br"),a._v("4.高并发读写需求，传统关系型数据库来说，硬盘I/O是一个很大的瓶颈")]),a._v(" "),t("td",[a._v("1.技术起步晚，维护工具以及技术资料有限"),t("br"),a._v("2.不支持 sql 工业标准"),t("br"),a._v("3.没有join等复杂的连接操作"),t("br"),a._v(" 4.事务处理能力弱"),t("br"),a._v("5.没有完整性约束，对于复杂业务场景支持较差")])]),a._v(" "),t("tr",[t("td",[a._v("应用场景")]),a._v(" "),t("td"),a._v(" "),t("td",[a._v("1.为有数据更新的表做索引或表结构变更"),t("br"),a._v("2.字段不固定时的应用"),t("br"),a._v(" 3.对简单查询需要快速返回结果的处理")])])])]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("首先一般非关系型数据库是基于CAP模型，而传统的关系型数据库是基于ACID模型的")])])}),[],!1,null,null,null);t.default=s.exports}}]);